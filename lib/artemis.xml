<?xml version="1.0"?>
<doc>
    <assembly>
        <name>artemis</name>
    </assembly>
    <members>
        <member name="T:Artemis.Manager.RemovedEntityHandler">
            <summary>Delegate RemovedEntityHandler.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.Manager.GroupManager">
            <summary>Class GroupManager.</summary>
        </member>
        <member name="F:Artemis.Manager.GroupManager.emptyBag">
            <summary>The empty bag.</summary>
        </member>
        <member name="F:Artemis.Manager.GroupManager.entitiesByGroup">
            <summary>The entities by group.</summary>
        </member>
        <member name="F:Artemis.Manager.GroupManager.groupByEntity">
            <summary>The group by entity.</summary>
        </member>
        <member name="M:Artemis.Manager.GroupManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.GroupManager"/> class.</summary>
        </member>
        <member name="M:Artemis.Manager.GroupManager.GetEntities(System.String)">
            <summary>Gets the entities.</summary>
            <param name="group">The group.</param>
            <returns>All entities related to the specified group in a Bag{Entity}.</returns>
        </member>
        <member name="M:Artemis.Manager.GroupManager.GetGroupOf(Artemis.Entity)">
            <summary>Gets the group of.</summary>
            <param name="entity">The entity.</param>
            <returns>The group name.</returns>
        </member>
        <member name="M:Artemis.Manager.GroupManager.IsGrouped(Artemis.Entity)">
            <summary>Determines whether the specified entity is grouped.</summary>
            <param name="entity">The entity.</param>
            <returns><see langword="true" /> if the specified entity is grouped; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.Manager.GroupManager.Remove(Artemis.Entity)">
            <summary>Removes an entity from the group it is assigned to, if any.</summary>
            <param name="entity">The entity to be removed</param>
        </member>
        <member name="M:Artemis.Manager.GroupManager.Set(System.String,Artemis.Entity)">
            <summary>Sets the specified group.</summary>
            <param name="group">The group.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.Blackboard.SimpleTrigger">
            <summary>Class SimpleTrigger.</summary>
        </member>
        <member name="T:Artemis.Blackboard.Trigger">
            <summary>Class Trigger.</summary>
        </member>
        <member name="M:Artemis.Blackboard.Trigger.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Blackboard.Trigger"/> class.</summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Artemis.Blackboard.Trigger.RemoveThisTrigger">
            <summary>Removes the this trigger.</summary>
        </member>
        <member name="M:Artemis.Blackboard.Trigger.Fire(Artemis.Blackboard.TriggerStateType)">
            <summary>Fires the specified trigger state.</summary>
            <param name="triggerStateType">State of the trigger.</param>
        </member>
        <member name="M:Artemis.Blackboard.Trigger.CalledOnFire(Artemis.Blackboard.TriggerStateType)">
            <summary>Called if is fired.</summary>
            <param name="triggerStateType">State of the trigger.</param>
        </member>
        <member name="M:Artemis.Blackboard.Trigger.CheckConditionToFire">
            <summary>Checks the condition to fire.</summary>
            <returns><see langword="true" /> if XXXX, <see langword="false" /> otherwise</returns>
        </member>
        <member name="E:Artemis.Blackboard.Trigger.OnFire">
            <summary>Occurs when [on fire].</summary>
        </member>
        <member name="P:Artemis.Blackboard.Trigger.BlackBoard">
            <summary>Gets the black board.</summary>
            <value>The black board.</value>
        </member>
        <member name="P:Artemis.Blackboard.Trigger.TriggerStateType">
            <summary>Gets the state of the trigger.</summary>
            <value>The state of the trigger.</value>
        </member>
        <member name="P:Artemis.Blackboard.Trigger.WorldPropertiesMonitored">
            <summary>Gets or sets the entityWorld properties monitored.</summary>
            <value>The entityWorld properties monitored.</value>
        </member>
        <member name="P:Artemis.Blackboard.Trigger.IsFired">
            <summary>Gets or sets a value indicating whether this instance is fired.</summary>
            <value><see langword="true" /> if this instance is fired; otherwise, <see langword="false" />.</value>
        </member>
        <member name="F:Artemis.Blackboard.SimpleTrigger.condition">
            <summary>The condition.</summary>
        </member>
        <member name="F:Artemis.Blackboard.SimpleTrigger.onFire">
            <summary>The on fire.</summary>
        </member>
        <member name="M:Artemis.Blackboard.SimpleTrigger.#ctor(System.String,System.Func{Artemis.Blackboard.BlackBoard,Artemis.Blackboard.TriggerStateType,System.Boolean},System.Action{Artemis.Blackboard.TriggerStateType})">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Blackboard.SimpleTrigger"/> class.</summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="onFire">The on fire.</param>
        </member>
        <member name="M:Artemis.Blackboard.SimpleTrigger.CalledOnFire(Artemis.Blackboard.TriggerStateType)">
            <summary>Called if is fired.</summary>
            <param name="triggerStateType">State of the trigger.</param>
        </member>
        <member name="M:Artemis.Blackboard.SimpleTrigger.CheckConditionToFire">
            <summary>Checks the condition to fire.</summary>
            <returns><see langword="true" /> if is ready to fire, <see langword="false" /> otherwise</returns>
        </member>
        <member name="T:Artemis.Attributes.ArtemisComponentCreate">
            <summary>Class ArtemisComponentCreate.</summary>
        </member>
        <member name="T:Artemis.System.ProcessingSystem">
            <summary><para>The processing system class.</para>
            <para>Special type of System that has NO entity associated (called once each frame).</para>
            <para>Extend it and override the ProcessSystem function.</para></summary>
        </member>
        <member name="T:Artemis.System.EntitySystem">
            <summary><para>Base of all Entity Systems.</para>
            <para>Provide basic functionalities.</para></summary>
        </member>
        <member name="F:Artemis.System.EntitySystem.entityWorld">
            <summary>The entity world.</summary>
        </member>
        <member name="F:Artemis.System.EntitySystem.actives">
            <summary>The actives.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.#cctor">
            <summary>Initializes static members of the <see cref="T:Artemis.System.EntitySystem"/> class.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntitySystem"/> class.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.#ctor(System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntitySystem"/> class.</summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntitySystem"/> class.</summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.GetMergedTypes(System.Type,System.Type[])">
            <summary>Gets the merged types.</summary>
            <param name="requiredType">Type of the required.</param>
            <param name="otherTypes">The other types.</param>
            <returns>All specified types in an array.</returns>
        </member>
        <member name="M:Artemis.System.EntitySystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.OnAdded(Artemis.Entity)">
            <summary>Called when [added].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.OnChange(Artemis.Entity)">
            <summary>Called when [change].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.OnDisabled(Artemis.Entity)">
            <summary>Called when [disabled].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.OnEnabled(Artemis.Entity)">
            <summary>Called when [enabled].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.OnRemoved(Artemis.Entity)">
            <summary>Called when [removed].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.Process">
            <summary>Processes this instance.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.Toggle">
            <summary>Toggles this instance.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.Add(Artemis.Entity)">
            <summary>Adds the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.Begin">
            <summary>Begins this instance processing.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.CheckProcessing">
            <summary>Checks the processing.</summary>
            <returns><see langword="true" /> if this instance is enabled, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:Artemis.System.EntitySystem.End">
            <summary>Ends this instance processing.</summary>
        </member>
        <member name="M:Artemis.System.EntitySystem.Interests(Artemis.Entity)">
            <summary>Interests in the specified entity.</summary>
            <param name="entity">The entity.</param>
            <returns><see langword="true" /> if any interests in entity, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:Artemis.System.EntitySystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.Remove(Artemis.Entity)">
            <summary>Removes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.Disable(Artemis.Entity)">
            <summary>Disables the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntitySystem.Enable(Artemis.Entity)">
            <summary>Enables the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Artemis.System.EntitySystem.BlackBoard">
            <summary>Gets or sets the black board.</summary>
            <value>The black board.</value>
        </member>
        <member name="P:Artemis.System.EntitySystem.ActiveEntities">
            <summary>Gets all active Entities for this system.</summary>
        </member>
        <member name="P:Artemis.System.EntitySystem.EntityWorld">
            <summary>Gets or sets the entity world.</summary>
            <value>The entity world.</value>
        </member>
        <member name="P:Artemis.System.EntitySystem.IsEnabled">
            <summary>Gets or sets a value indicating whether this instance is enabled.</summary>
            <value><see langword="true" /> if this instance is enabled; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.System.EntitySystem.SystemBit">
            <summary>Gets or sets the system bit. (Setter only).</summary>
            <value>The system bit.</value>
        </member>
        <member name="P:Artemis.System.EntitySystem.Aspect">
            <summary>Gets or sets the aspect.</summary>
            <value>The aspect.</value>
        </member>
        <member name="P:Artemis.System.EntitySystem.Types">
            <summary>Gets the types.</summary>
            <value>The types.</value>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.OnAdded(Artemis.Entity)">
            <summary>Called when [added].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.OnChange(Artemis.Entity)">
            <summary>Called when [change].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.OnDisabled(Artemis.Entity)">
            <summary>Called when [disabled].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.OnEnabled(Artemis.Entity)">
            <summary>Called when [enabled].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.OnRemoved(Artemis.Entity)">
            <summary>Called when [removed].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.Process">
            <summary>Processes this instance. [Internal]</summary>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.ProcessSystem">
            <summary>Processes the System. Users must extend this method. Called once per frame.</summary>
        </member>
        <member name="M:Artemis.System.ProcessingSystem.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.Utils.Bag`1">
            <summary>Class Bag.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
        </member>
        <member name="F:Artemis.Utils.Bag`1.elements">
            <summary>The elements.</summary>
        </member>
        <member name="M:Artemis.Utils.Bag`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Utils.Bag`1"/> class.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Add(`0)">
            <summary>
            Adds the specified element to the end of this bag.
            If needed also increases the capacity of the bag.
            </summary>
            <param name="element">The element to be added to this list.</param>
        </member>
        <member name="M:Artemis.Utils.Bag`1.AddRange(Artemis.Utils.Bag{`0})">
            <summary>Adds a range of elements into this bag.</summary>
            <param name="rangeOfElements">The elements to add.</param>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Clear">
            <summary>
            Removes all of the elements from this bag.
            The bag will be empty after this call returns.
            </summary>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Contains(`0)">
            <summary>Determines whether bag contains the specified element.</summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> if bag contains the specified element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Get(System.Int32)">
            <summary>Gets the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The specified element.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Remove(System.Int32)">
            <summary>Removes the specified index.</summary>
            <param name="index">The index.</param>
            <returns>The removed element.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Remove(`0)">
            <summary>
            <para>Removes the first occurrence of the specified element from this Bag, if it is present.</para>
            <para>If the Bag does not contain the element, it is unchanged.</para>
            <para>Does this by overwriting it was last element then removing last element.</para>
            </summary>
            <param name="element">The element to be removed from this list, if present.</param>
            <returns><see langword="true"/> if this list contained the specified element, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.RemoveAll(Artemis.Utils.Bag{`0})">
            <summary>Removes all matching elements.</summary>
            <param name="bag">The bag.</param>
            <returns><see langword="true" /> if found matching elements, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.RemoveLast">
            <summary>Removes the last.</summary>
            <returns>The last element.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Set(System.Int32,`0)">
            <summary>Sets the specified index.</summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Artemis.Utils.Bag`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Grow">
            <summary>Grows this instance.</summary>
        </member>
        <member name="M:Artemis.Utils.Bag`1.Grow(System.Int32)">
            <summary>Grows the specified new capacity.</summary>
            <param name="newCapacity">The new capacity.</param>
        </member>
        <member name="P:Artemis.Utils.Bag`1.Capacity">
            <summary>Gets the capacity.</summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Artemis.Utils.Bag`1.IsEmpty">
            <summary>Gets a value indicating whether this instance is empty.</summary>
            <value><see langword="true" /> if this instance is empty; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.Utils.Bag`1.Count">
            <summary>Gets the size.</summary>
            <value>The size.</value>
        </member>
        <member name="P:Artemis.Utils.Bag`1.Item(System.Int32)">
            <summary>Returns the element at the specified position in Bag.</summary>
            <param name="index">The index.</param>
            <returns>The element from the specified position in Bag.</returns>
        </member>
        <member name="T:Artemis.System.DelayedEntitySystem">
            <summary>Class DelayedEntitySystem.</summary>
        </member>
        <member name="F:Artemis.System.DelayedEntitySystem.timer">
            <summary>The timer.</summary>
        </member>
        <member name="F:Artemis.System.DelayedEntitySystem.isRunning">
            <summary>The is running.</summary>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.#ctor(System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.DelayedEntitySystem"/> class.</summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.DelayedEntitySystem"/> class.</summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.GetRemainingTimeUntilProcessing">
            <summary>Gets the remaining time until processing.</summary>
            <returns>The remaining time in ticks.</returns>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.IsRunning">
            <summary>Determines whether this instance is running.</summary>
            <returns><see langword="true" /> if this instance is running; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity},System.Int64)">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
            <param name="accumulatedDelta">The accumulated delta.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.StartDelayedRun(System.TimeSpan)">
            <summary>Starts the delayed run.</summary>
            <param name="delay">The time span.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.Stop">
            <summary>
            <para>Stops this instance.</para>
            <para>Aborts running the system in the future and stops it.</para>
            <para>Call delayedRun() to start it again.</para>
            </summary>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.CheckProcessing">
            <summary>Checks the processing.</summary>
            <returns><see langword="true" /> if this instance is enabled, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:Artemis.System.DelayedEntitySystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="P:Artemis.System.DelayedEntitySystem.InitialTimeDelay">
            <summary>Gets the initial time delay.</summary>
            <value>The initial time delay.</value>
        </member>
        <member name="T:Artemis.Manager.SystemManager">
            <summary>Class SystemManager.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.entityWorld">
            <summary>The entity world.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.systems">
            <summary>The systems.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.mergedBag">
            <summary>The merged bag.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.updateLayers">
            <summary>The update layers.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.drawLayers">
            <summary>The draw layers.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemManager.#ctor(Artemis.EntityWorld)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.SystemManager"/> class.</summary>
            <param name="entityWorld">The entity world.</param>
        </member>
        <member name="M:Artemis.Manager.SystemManager.SetSystem``1(``0,Artemis.Manager.GameLoopType,System.Int32,Artemis.Manager.ExecutionType)">
            <summary>Sets the system.</summary>
            <typeparam name="T">The <see langword="Type" /> T.</typeparam>
            <param name="system">The system.</param>
            <param name="gameLoopType">Type of the game loop.</param>
            <param name="layer">The layer.</param>
            <param name="executionType">Type of the execution.</param>
            <returns>The set system.</returns>
        </member>
        <member name="M:Artemis.Manager.SystemManager.GetSystems``1">
            <summary>
            Gets the systems.
            </summary>
            <typeparam name="T">The EntitySystem</typeparam>
            <returns>A List of System Instances</returns>
        </member>
        <member name="M:Artemis.Manager.SystemManager.GetSystem``1">
            <summary>
            Gets the system.
            </summary>
            <typeparam name="T">The EntitySystem</typeparam>
            <returns>The system instance</returns>
            <exception cref="T:System.InvalidOperationException">There are more or none systems of the type passed</exception>
        </member>
        <member name="M:Artemis.Manager.SystemManager.InitializeAll(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>Initializes all.</summary>
            <param name="processAttributes">if set to <see langword="true"/> [process attributes].</param>
            <param name="assembliesToScan">The assemblies to scan.</param>
            <exception cref="T:System.Exception">propertyComponentPool is null.</exception>
        </member>
        <member name="M:Artemis.Manager.SystemManager.TerminateAll">
            <summary>Terminates all.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemManager.Update">
            <summary>Updates the specified execution type.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemManager.Draw">
            <summary>Updates the specified execution type.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemManager.Process(System.Collections.Generic.IDictionary{System.Int32,Artemis.Manager.SystemManager.SystemLayer})">
            <summary>Processes the specified systems to process.</summary>
            <param name="systemsToProcess">The systems to process.</param>
        </member>
        <member name="M:Artemis.Manager.SystemManager.SetSystem(System.Collections.Generic.IDictionary{System.Int32,Artemis.Manager.SystemManager.SystemLayer}@,Artemis.System.EntitySystem,System.Int32,Artemis.Manager.ExecutionType)">
            <summary>Sets the system.</summary>
            <param name="layers">The layers.</param>
            <param name="system">The system.</param>
            <param name="layer">The layer.</param>
            <param name="executionType">Type of the execution.</param>
        </member>
        <member name="M:Artemis.Manager.SystemManager.CreateInstance(System.Type)">
            <summary>Creates the instance.</summary>
            <param name="type">The type.</param>
            <returns>The specified ComponentPool-able instance.</returns>
        </member>
        <member name="M:Artemis.Manager.SystemManager.ProcessBagSynchronous(Artemis.Utils.Bag{Artemis.System.EntitySystem})">
            <summary>Updates the bag synchronous.</summary>
            <param name="entitySystems">The entitySystems.</param>
        </member>
        <member name="M:Artemis.Manager.SystemManager.ProcessBagAsynchronous(System.Collections.Generic.IEnumerable{Artemis.System.EntitySystem})">
            <summary>Updates the bag asynchronous.</summary>
            <param name="entitySystems">The entity systems.</param>
        </member>
        <member name="M:Artemis.Manager.SystemManager.CreatePool(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>Creates the pool.</summary>
            <param name="type">The type.</param>
            <param name="attributes">The attributes.</param>
            <exception cref="T:System.NullReferenceException">propertyComponentPool is null.</exception>
        </member>
        <member name="M:Artemis.Manager.SystemManager.SetSystem(System.Type,Artemis.System.EntitySystem,Artemis.Manager.GameLoopType,System.Int32,Artemis.Manager.ExecutionType)">
            <summary>Sets the system.</summary>
            <param name="systemType">Type of the system.</param>
            <param name="system">The system.</param>
            <param name="gameLoopType">Type of the game loop.</param>
            <param name="layer">The layer.</param>
            <param name="executionType">Type of the execution.</param>
            <returns>The EntitySystem.</returns>
        </member>
        <member name="P:Artemis.Manager.SystemManager.Systems">
            <summary>Gets the systems.</summary>
            <value>The systems.</value>
        </member>
        <member name="T:Artemis.Manager.SystemManager.SystemLayer">
            <summary>The system layer class.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.SystemLayer.Synchronous">
            <summary>The synchronous.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemManager.SystemLayer.Asynchronous">
            <summary>The asynchronous.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemManager.SystemLayer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.SystemManager.SystemLayer"/> class.</summary>
        </member>
        <member name="P:Artemis.Manager.SystemManager.SystemLayer.Item(Artemis.Manager.ExecutionType)">
            <summary>Gets the <see cref="T:Artemis.Utils.Bag`1"/> with the specified execution type.</summary>
            <param name="executionType">Type of the execution.</param>
            <returns>The Bag{EntitySystem}.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The ExecutionType must be Synchronous (or Asynchronous [if supported]).</exception>
        </member>
        <member name="T:Artemis.Interface.IEntityTemplate">
            <summary>Interface IEntityTemplate.</summary>
        </member>
        <member name="M:Artemis.Interface.IEntityTemplate.BuildEntity(Artemis.Entity,Artemis.EntityWorld,System.Object[])">
            <summary>Builds the entity.</summary>
            <param name="entity">The entity.</param>
            <param name="entityWorld">The entityWorld.</param>
            <param name="args">The args.</param>
            <returns>The build entity.</returns>
        </member>
        <member name="T:Artemis.ComponentPoolable">
            <summary>Class ComponentPool-able.</summary>
        </member>
        <member name="T:Artemis.Interface.IComponent">
            <summary>Empty Interface that all Components must extend.</summary>
        </member>
        <member name="M:Artemis.ComponentPoolable.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.ComponentPoolable"/> class.</summary>
        </member>
        <member name="M:Artemis.ComponentPoolable.CleanUp">
            <summary>Cleans up.</summary>
        </member>
        <member name="M:Artemis.ComponentPoolable.Initialize">
            <summary>Initializes this instance.</summary>
        </member>
        <member name="P:Artemis.ComponentPoolable.PoolId">
            <summary>Gets or sets the pool id.</summary>
            <value>The pool id.</value>
        </member>
        <member name="T:Artemis.System.ParallelEntityProcessingSystem">
            <summary>Class ParallelEntityProcessingSystem.</summary>
        </member>
        <member name="F:Artemis.System.ParallelEntityProcessingSystem.factory">
            <summary>The factory.</summary>
        </member>
        <member name="M:Artemis.System.ParallelEntityProcessingSystem.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.ParallelEntityProcessingSystem"/> class.</summary>
            <param name="requiredType">Type of the required.</param>
            <param name="otherTypes">The other types.</param>
        </member>
        <member name="M:Artemis.System.ParallelEntityProcessingSystem.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.ParallelEntityProcessingSystem"/> class.</summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.ParallelEntityProcessingSystem.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.ParallelEntityProcessingSystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.Manager.QueueManager">
            <summary>Class QueueManager.</summary>
        </member>
        <member name="F:Artemis.Manager.QueueManager.lockObject">
            <summary>The lock object.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.QueueManager"/> class.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager.AcquireLock">
            <summary>Acquires the lock.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager.ReleaseLock">
            <summary>Releases the lock.</summary>
        </member>
        <member name="P:Artemis.Manager.QueueManager.EntitiesToProcessEachFrame">
            <summary>Gets or sets the entities to process each frame.</summary>
            <value>The entities to process each frame.</value>
        </member>
        <member name="P:Artemis.Manager.QueueManager.Queue">
            <summary>Gets or sets the queue.</summary>
            <value>The queue.</value>
        </member>
        <member name="P:Artemis.Manager.QueueManager.RefCount">
            <summary>Gets or sets the ref count.</summary>
            <value>The ref count.</value>
        </member>
        <member name="T:Artemis.Manager.QueueManager`1">
            <summary>Class QueueManager that is independent of the entity concept.</summary>
            <typeparam name="T">The Type T.</typeparam>
        </member>
        <member name="F:Artemis.Manager.QueueManager`1.lockObject">
            <summary>The lock object.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.QueueManager`1"/> class.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager`1.AcquireLock">
            <summary>Acquires the lock.</summary>
        </member>
        <member name="M:Artemis.Manager.QueueManager`1.ReleaseLock">
            <summary>Releases the lock.</summary>
        </member>
        <member name="P:Artemis.Manager.QueueManager`1.EntitiesToProcessEachFrame">
            <summary>Gets or sets the entities to process each frame.</summary>
            <value>The entities to process each frame.</value>
        </member>
        <member name="P:Artemis.Manager.QueueManager`1.Queue">
            <summary>Gets or sets the queue.</summary>
            <value>The queue.</value>
        </member>
        <member name="P:Artemis.Manager.QueueManager`1.RefCount">
            <summary>Gets or sets the ref count.</summary>
            <value>The ref count.</value>
        </member>
        <member name="T:Artemis.Manager.EntityManager">
            <summary>The Entity Manager.</summary>
        </member>
        <member name="F:Artemis.Manager.EntityManager.componentsByType">
            <summary>The components by type.</summary>
        </member>
        <member name="F:Artemis.Manager.EntityManager.removedAndAvailable">
            <summary>The removed and available.</summary>
        </member>
        <member name="F:Artemis.Manager.EntityManager.uniqueIdToEntities">
            <summary>Map unique id to entities</summary>
        </member>
        <member name="F:Artemis.Manager.EntityManager.entityWorld">
            <summary>The entity world.</summary>
        </member>
        <member name="F:Artemis.Manager.EntityManager.nextAvailableId">
            <summary>The next available id.</summary>
        </member>
        <member name="M:Artemis.Manager.EntityManager.#ctor(Artemis.EntityWorld)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.EntityManager"/> class.</summary>
            <param name="entityWorld">The entity world.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.Create(System.Nullable{System.Int64})">
            <summary>Create a new, "blank" entity.</summary>
            <param name="uniqueid">The unique id.</param>
            <returns>New entity.</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.GetComponents(Artemis.Entity)">
            <summary>Get all components assigned to an entity.</summary>
            <param name="entity">Entity for which you want the components.</param>
            <returns>Bag of components</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.GetEntities(Artemis.Aspect)">
            <summary>Gets the entities.</summary>
            <param name="aspect">The aspect.</param>
            <returns>The filled Bag{Entity}.</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.GetEntity(System.Int32)">
            <summary>Get the entity for the given entityId</summary>
            <param name="entityId">Desired EntityId</param>
            <returns>The specified Entity.</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.GetEntityByUniqueId(System.Int64)">
            <summary>Gets the entity by unique ID. Note: that UniqueId is different from Id.</summary>
            <param name="entityUniqueId">The entity unique id.</param>
            <returns>The Entity.</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.IsActive(System.Int32)">
            <summary>Check if this entity is active, or has been deleted, within the framework.</summary>
            <param name="entityId">The entity id.</param>
            <returns><see langword="true" /> if the specified entity is active; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.Remove(Artemis.Entity)">
            <summary>Remove an entity from the entityWorld.</summary>
            <param name="entity">Entity you want to remove.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.AddComponent(Artemis.Entity,Artemis.Interface.IComponent)">
            <summary>Add the given component to the given entity.</summary>
            <param name="entity">Entity for which you want to add the component.</param>
            <param name="component">Component you want to add.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.AddComponent``1(Artemis.Entity,Artemis.Interface.IComponent)">
            <summary>
            <para>Add a component to the given entity.</para>
            <para>If the component's type does not already exist,</para>
            <para>add it to the bag of available component types.</para>
            </summary>
            <typeparam name="T">Component type you want to add.</typeparam>
            <param name="entity">The entity to which you want to add the component.</param>
            <param name="component">The component instance you want to add.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.AddComponent(Artemis.Entity,Artemis.Interface.IComponent,Artemis.ComponentType)">
            <summary>Adds the component.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.GetComponent(Artemis.Entity,Artemis.ComponentType)">
            <summary>Get the component instance of the given component type for the given entity.</summary>
            <param name="entity">The entity for which you want to get the component</param>
            <param name="componentType">The desired component type</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Artemis.Manager.EntityManager.Refresh(Artemis.Entity)">
            <summary>Ensure the any changes to components are synced up with the entity - ensure systems "see" all components.</summary>
            <param name="entity">The entity whose components you want to refresh</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.RemoveComponent``1(Artemis.Entity)">
            <summary>Removes the given component from the given entity.</summary>
            <typeparam name="T">The type of the component you want to remove.</typeparam>
            <param name="entity">The entity for which you are removing the component.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.RemoveComponent(Artemis.Entity,Artemis.ComponentType)">
            <summary>Removes the given component type from the given entity.</summary>
            <param name="entity">The entity for which you want to remove the component.</param>
            <param name="componentType">The component type you want to remove.</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.RemoveComponentsOfEntity(Artemis.Entity)">
            <summary>Strips all components from the given entity.</summary>
            <param name="entity">Entity for which you want to remove all components</param>
        </member>
        <member name="M:Artemis.Manager.EntityManager.EntityManagerRemovedComponentEvent(Artemis.Entity,Artemis.Interface.IComponent)">
            <summary>Entities the manager removed component event.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
        </member>
        <member name="E:Artemis.Manager.EntityManager.AddedComponentEvent">
            <summary>Occurs when [added component event].</summary>
        </member>
        <member name="E:Artemis.Manager.EntityManager.AddedEntityEvent">
            <summary>Occurs when [added entity event].</summary>
        </member>
        <member name="E:Artemis.Manager.EntityManager.RemovedComponentEvent">
            <summary>Occurs when [removed component event].</summary>
        </member>
        <member name="E:Artemis.Manager.EntityManager.RemovedEntityEvent">
            <summary>Occurs when [removed entity event].</summary>
        </member>
        <member name="P:Artemis.Manager.EntityManager.ActiveEntities">
            <summary>Gets all active Entities.</summary>
            <value>The active entities.</value>
            <returns>Bag of active entities.</returns>
        </member>
        <member name="P:Artemis.Manager.EntityManager.EntitiesRequestedCount">
            <summary>Gets how many entities are currently active. Only available in debug mode.</summary>
            <value>The active entities count.</value>
            <returns>How many entities are currently active.</returns>
        </member>
        <member name="P:Artemis.Manager.EntityManager.RemovedEntitiesRetention">
            <summary>Gets or sets the removed entities retention.</summary>
            <value>The removed entities retention.</value>
        </member>
        <member name="P:Artemis.Manager.EntityManager.TotalCreated">
            <summary>Gets how many entities have been created since start. Only available in debug mode.</summary>
            <value>The total created.</value>
            <returns>The total number of entities created.</returns>
        </member>
        <member name="P:Artemis.Manager.EntityManager.TotalRemoved">
            <summary>Gets how many entities have been removed since start. Only available in debug mode.</summary>
            <value>The total removed.</value>
            <returns>The total number of removed entities.</returns>
        </member>
        <member name="T:Artemis.Interface.IComponentPool`1">
            <summary>Interface IComponentPool.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
        </member>
        <member name="M:Artemis.Interface.IComponentPool`1.CleanUp">
            <summary>
            <para>Cleans up the pool by checking each valid object</para>
            <para>to ensure it is still actually valid.</para>
            <para>Must be called regularly to free returned Objects.</para>
            </summary>
        </member>
        <member name="M:Artemis.Interface.IComponentPool`1.New">
            <summary>Gets a new object from the Pool.</summary>
            <returns>The next object in the pool if available, null if all instances are valid.</returns>
        </member>
        <member name="M:Artemis.Interface.IComponentPool`1.ReturnObject(`0)">
            <summary>Returns the specified component.</summary>
            <param name="component">The component.</param>
        </member>
        <member name="T:Artemis.System.TagSystem">
            <summary>Tag System does not fire ANY Events of the EntitySystem.</summary>
        </member>
        <member name="M:Artemis.System.TagSystem.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.TagSystem"/> class.</summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Artemis.System.TagSystem.OnChange(Artemis.Entity)">
            <summary>Called when [change].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.TagSystem.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.TagSystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="P:Artemis.System.TagSystem.Tag">
            <summary>Gets or sets the tag.</summary>
            <value>The tag.</value>
        </member>
        <member name="T:Artemis.System.DelayedEntityProcessingSystem">
            <summary>Class DelayedEntityProcessingSystem.</summary>
        </member>
        <member name="M:Artemis.System.DelayedEntityProcessingSystem.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.DelayedEntityProcessingSystem"/> class.</summary>
            <param name="requiredType">The required component type.</param>
            <param name="otherTypes">Other component types.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntityProcessingSystem.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.DelayedEntityProcessingSystem"/> class.</summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntityProcessingSystem.Process(Artemis.Entity,System.Int64)">
            <summary>Process an entity this system is interested in.</summary>
            <param name="entity">The entity.</param>
            <param name="accumulatedDelta">The entity to process.</param>
        </member>
        <member name="M:Artemis.System.DelayedEntityProcessingSystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity},System.Int64)">
            <summary>Process all entities with the delayed Entity processing system</summary>
            <param name="entities">Entities to process</param>
            <param name="accumulatedDelta">Total Delay</param>
        </member>
        <member name="T:Artemis.Manager.AddedEntityHandler">
            <summary>Delegate AddedEntityHandler.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.Attributes.ArtemisComponentPool">
            <summary>Class ArtemisComponentPool.</summary>
        </member>
        <member name="M:Artemis.Attributes.ArtemisComponentPool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Attributes.ArtemisComponentPool"/> class.</summary>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.InitialSize">
            <summary>Gets or sets the initial size of the Pool. Default is 10.</summary>
            <value>The initial size.</value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.ResizeSize">
            <summary>Gets or sets the size of the pool resize. Default is 10.</summary>
            <value>The size of the resize.</value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.IsResizable">
            <summary>Gets or sets a value indicating whether the pool is resizable.</summary>
            <value><see langword="true" /> if the pool is resizable; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.IsSupportMultiThread">
            <summary>Gets or sets a value indicating whether this instance should support multi thread environment. Default is <see langword="false" />.</summary>
            <value><see langword="true" /> if this instance should support multi thread environment; otherwise, <see langword="false" />.</value>
        </member>
        <member name="T:Artemis.System.QueueSystemProcessing">
            <summary>
            <para>System Not based On Components.</para>
            <para>It Process ONCE everything you explicitly add to it</para>
            <para>using the method AddToQueue.</para>
            </summary>
        </member>
        <member name="F:Artemis.System.QueueSystemProcessing.queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.QueueSystemProcessing"/> class.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.AddToQueue(Artemis.Entity)">
            <summary>Adds to queue.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.OnAdded(Artemis.Entity)">
            <summary>Called when the system has received a entity it is interested in, e.g. created or a component was added to it.</summary>
            <param name="entity">The entity that was added to this system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.OnChange(Artemis.Entity)">
            <summary>Called when an entity was removed from this system, e.g. deleted or had one of it's components removed.</summary>
            <param name="entity">The entity that was removed from this system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.OnRemoved(Artemis.Entity)">
            <summary>Called when [removed].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessing.Process">
            <summary>Processes this instance.</summary>
        </member>
        <member name="P:Artemis.System.QueueSystemProcessing.EntitiesToProcessEachFrame">
            <summary>Gets or sets the entities to process each frame.</summary>
            <value>The entities to process each frame.</value>
        </member>
        <member name="P:Artemis.System.QueueSystemProcessing.QueueCount">
            <summary>Gets the queue count.</summary>
            <value>The queue count.</value>
        </member>
        <member name="T:Artemis.Aspect">
            <summary>Specify a Filter class to filter what Entities (with what Components) a EntitySystem will Process.</summary>
        </member>
        <member name="M:Artemis.Aspect.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Aspect"/> class.</summary>
        </member>
        <member name="M:Artemis.Aspect.All(System.Type[])">
            <summary>All the specified types.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.Empty">
            <summary>Returns an Empty Aspect (does not filter anything).</summary>
            <returns>The Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.Exclude(System.Type[])">
            <summary>Excludes the specified types.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.One(System.Type[])">
            <summary>Ones the specified types.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.Interests(Artemis.Entity)">
            <summary>Called by the EntitySystem to determine if the system is interested in the passed Entity</summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Artemis.Aspect.GetAll(System.Type[])">
            <summary>Gets all.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.GetExclude(System.Type[])">
            <summary>Gets the exclude.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.GetOne(System.Type[])">
            <summary>Gets the one.</summary>
            <param name="types">The types.</param>
            <returns>The specified Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.ToString">
            <summary>Creates a string that displays all the type names of the components that interests this Aspect.</summary>
            <returns>A string displaying all the type names that interests this Aspect.</returns>
        </member>
        <member name="M:Artemis.Aspect.AppendTypes(System.Text.StringBuilder,System.String,System.Numerics.BigInteger)">
            <summary>Appends the types.</summary>
            <param name="builder">The builder.</param>
            <param name="headerMessage">The header message.</param>
            <param name="typeBits">The type bits.</param>
        </member>
        <member name="P:Artemis.Aspect.ContainsTypesMap">
            <summary>Gets or sets the contains types map.</summary>
            <value>The contains types map.</value>
        </member>
        <member name="P:Artemis.Aspect.ExcludeTypesMap">
            <summary>Gets or sets the exclude types map.</summary>
            <value>The exclude types map.</value>
        </member>
        <member name="P:Artemis.Aspect.OneTypesMap">
            <summary>Gets or sets the one types map.</summary>
            <value>The one types map.</value>
        </member>
        <member name="T:Artemis.Utils.Timer">
            <summary>The class Timer.</summary>
        </member>
        <member name="F:Artemis.Utils.Timer.delayTicks">
            <summary>The delay ticks.</summary>
        </member>
        <member name="M:Artemis.Utils.Timer.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Utils.Timer"/> class.</summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:Artemis.Utils.Timer.IsReached(System.Int64)">
            <summary>Determines whether the specified delta is reached.</summary>
            <param name="deltaTicks">The delta in ticks.</param>
            <returns><see langword="true" /> if the specified delta is reached; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.Utils.Timer.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="P:Artemis.Utils.Timer.AccumulatedTicks">
            <summary>Gets the accumulated ticks.</summary>
            <value>The accumulated ticks.</value>
        </member>
        <member name="T:Artemis.System.IntervalTagSystem">
            <summary>Class IntervalTagSystem.</summary>
        </member>
        <member name="F:Artemis.System.IntervalTagSystem.timer">
            <summary>The timer.</summary>
        </member>
        <member name="M:Artemis.System.IntervalTagSystem.#ctor(System.TimeSpan,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.IntervalTagSystem"/> class.</summary>
            <param name="timeSpan">The time span.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Artemis.System.IntervalTagSystem.CheckProcessing">
            <summary>Checks the processing.</summary>
            <returns><see langword="true" /> if this instance is enabled, <see langword="false" /> otherwise</returns>
        </member>
        <member name="T:Artemis.Manager.TagManager">
            <summary>Class TagManager.</summary>
        </member>
        <member name="F:Artemis.Manager.TagManager.entityByTag">
            <summary>The entity by tag.</summary>
        </member>
        <member name="M:Artemis.Manager.TagManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Manager.TagManager"/> class.</summary>
        </member>
        <member name="M:Artemis.Manager.TagManager.GetEntity(System.String)">
            <summary>Gets the entity.</summary>
            <param name="tag">The tag.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:Artemis.Manager.TagManager.GetTagOfEntity(Artemis.Entity)">
            <summary>Gets the tag of entity.</summary>
            <param name="entity">The entity.</param>
            <returns>The tag of the specified entity.</returns>
        </member>
        <member name="M:Artemis.Manager.TagManager.IsRegistered(System.String)">
            <summary>Determines whether the specified tag is registered.</summary>
            <param name="tag">The tag.</param>
            <returns><see langword="true" /> if the specified tag is registered; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.Manager.TagManager.Register(System.String,Artemis.Entity)">
            <summary>Registers the specified tag.</summary>
            <param name="tag">The tag.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.Manager.TagManager.Unregister(System.String)">
            <summary>Unregisters the specified tag.</summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Artemis.Manager.TagManager.Unregister(Artemis.Entity)">
            <summary>Unregisters the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.EntityWorld">
            <summary><para>The Entity World Class.</para>
            <para>Main interface of the Entity System.</para></summary>
        </member>
        <member name="F:Artemis.EntityWorld.deleted">
            <summary>The deleted.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.entityTemplates">
            <summary>The entity templates.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.pools">
            <summary>The pools.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.refreshed">
            <summary>The refreshed.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.dateTime">
            <summary>The date time.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.poolCleanupDelayCounter">
            <summary>The pool cleanup delay counter.</summary>
        </member>
        <member name="F:Artemis.EntityWorld.isInitialized">
            <summary>
            If this instance is initialized
            </summary>
        </member>
        <member name="M:Artemis.EntityWorld.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.EntityWorld"/> class.
            </summary>
            <param name="isSortedEntities">if set to <c>true</c> [is sorted entities].</param>
            <param name="processAttributes">if set to <c>true</c> [process attributes].</param>
            <param name="initializeAll">if set to <c>true</c> [initialize all]. If you pass true here, there will be no need to call EntityWorld.InitializeAll() method</param>
        </member>
        <member name="M:Artemis.EntityWorld.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntity(System.Nullable{System.Int64})">
            <summary>Creates the entity.</summary>
            <param name="entityUniqueId">The desired unique id of this Entity. if null, <c>artemis</c> will create an unique ID.
            This value can be accessed by using the property uniqueID of the Entity</param>
            <returns>A new entity.</returns>
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntityFromTemplate(System.String,System.Object[])">
            <summary>Creates a entity from template.</summary>
            <param name="entityTemplateTag">The entity template tag.</param>
            <param name="templateArgs">The template arguments.</param>
            <returns>The created entity.</returns>
            <exception cref="T:Artemis.Exceptions.MissingEntityTemplateException">EntityTemplate for the tag "entityTemplateTag" was not registered.</exception>
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntityFromTemplate(System.Int64,System.String,System.Object[])">
            <summary>Creates a entity from template.</summary>
            <param name="entityUniqueId">The entity unique id. (<c>artemis</c> can provide this value, use the overloaded method)</param>
            <param name="entityTemplateTag">The entity template tag.</param>
            <param name="templateArgs">The template arguments.</param>
            <returns>The created entity.</returns>
            <exception cref="T:Artemis.Exceptions.MissingEntityTemplateException">EntityTemplate for the tag "entityTemplateTag" was not registered.</exception>
        </member>
        <member name="M:Artemis.EntityWorld.DeleteEntity(Artemis.Entity)">
            <summary>Deletes the entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.EntityWorld.GetComponentFromPool(System.Type)">
            <summary>Gets a component from a pool.</summary>
            <param name="type">The type of the object to get.</param>
            <returns>The found component.</returns>
            <exception cref="T:System.Exception">There is no pool for the specified type</exception>
        </member>
        <member name="M:Artemis.EntityWorld.GetComponentFromPool``1">
            <summary>Gets the component from pool.</summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The found component.</returns>
            <exception cref="T:System.Exception">There is no pool for the type  + type</exception>
        </member>
        <member name="M:Artemis.EntityWorld.GetEntity(System.Int32)">
            <summary>Gets the entity.</summary>
            <param name="entityId">The entity id.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:Artemis.EntityWorld.GetPool(System.Type)">
            <summary>Gets the pool for a Type.</summary>
            <param name="type">The type.</param>
            <returns>The specified ComponentPool{ComponentPool-able}.</returns>
        </member>
        <member name="M:Artemis.EntityWorld.InitializeAll(System.Reflection.Assembly[])">
            <summary>Initialize the EntityWorld.</summary>
            <param name="assembliesToScan">The assemblies to scan for data attributes.</param>
        </member>
        <member name="M:Artemis.EntityWorld.InitializeAll(System.Boolean)">
            <summary>Initialize the EntityWorld.
            Call this if you dont pass true in the parameter called InitializedALL in entity world constructor
            </summary>
            <param name="processAttributes">if set to <see langword="true" /> [process attributes].</param>
        </member>
        <member name="M:Artemis.EntityWorld.LoadEntityState(System.String,System.String,System.Collections.Generic.IEnumerable{Artemis.Interface.IComponent},System.Object[])">
            <summary>Loads the state of the entity.</summary>
            <param name="templateTag">The template tag. Can be null.</param>
            <param name="groupName">Name of the group. Can be null.</param>
            <param name="components">The components.</param>
            <param name="templateArgs">Parameters for entity template.</param>
            <returns>The <see cref="T:Artemis.Entity"/>.</returns>
        </member>
        <member name="M:Artemis.EntityWorld.SetEntityTemplate(System.String,Artemis.Interface.IEntityTemplate)">
            <summary>Sets the entity template.</summary>
            <param name="entityTag">The entity tag.</param>
            <param name="entityTemplate">The entity template.</param>
        </member>
        <member name="M:Artemis.EntityWorld.SetPool(System.Type,Artemis.Interface.IComponentPool{Artemis.ComponentPoolable})">
            <summary>Sets the pool for a specific type</summary>
            <param name="type">The type.</param>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:Artemis.EntityWorld.Update">
            <summary>Updates the EntityWorld.</summary>
        </member>
        <member name="M:Artemis.EntityWorld.Update(System.Int64)">
            <summary>Updates the EntityWorld.</summary>
            <param name="deltaTicks">The delta ticks.</param>
        </member>
        <member name="M:Artemis.EntityWorld.Draw">
            <summary>Draws the EntityWorld.</summary>
        </member>
        <member name="M:Artemis.EntityWorld.UnloadContent">
            <summary>Unloads the content.</summary>
        </member>
        <member name="M:Artemis.EntityWorld.RefreshEntity(Artemis.Entity)">
            <summary>Refreshes the entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntityFromTemplate(System.Nullable{System.Int64},System.String,System.Object[])">
            <summary>Creates the entity from template.</summary>
            <param name="entityUniqueId">The entity unique id.</param>
            <param name="entityTemplateTag">The entity template tag.</param>
            <param name="templateArgs">The template arguments.</param>
            <returns>The Entity.</returns>
            <exception cref="T:Artemis.Exceptions.MissingEntityTemplateException">Template for entity is missing.</exception>
        </member>
        <member name="P:Artemis.EntityWorld.CurrentState">
            <summary>Gets the current state of the entity world.</summary>
            <value>The state of the current.</value>
        </member>
        <member name="P:Artemis.EntityWorld.Delta">
            <summary>Gets the delta time since last game loop in ticks.</summary>
            <value>The delta in ticks.</value>
        </member>
        <member name="P:Artemis.EntityWorld.EntityManager">
            <summary>Gets the entity manager.</summary>
            <value>The entity manager.</value>
        </member>
        <member name="P:Artemis.EntityWorld.GroupManager">
            <summary>Gets the group manager.</summary>
            <value>The group manager.</value>
        </member>
        <member name="P:Artemis.EntityWorld.PoolCleanupDelay">
            <summary>Gets or sets the interval in FrameUpdates between pools cleanup. Default is 10.</summary>
            <value>The pool cleanup delay.</value>
        </member>
        <member name="P:Artemis.EntityWorld.SystemManager">
            <summary>Gets the system manager.</summary>
            <value>The system manager.</value>
        </member>
        <member name="P:Artemis.EntityWorld.TagManager">
            <summary>Gets the tag manager.</summary>
            <value>The tag manager.</value>
        </member>
        <member name="P:Artemis.EntityWorld.IsSortedEntities">
            <summary>Gets a value indicating whether this instance is sorted entities.</summary>
            <value><see langword="true" /> if this instance is sorted entities; otherwise, <see langword="false" />.</value>
        </member>
        <member name="T:Artemis.Entity">
            <summary>Basic unity of this entity system.</summary>
        </member>
        <member name="F:Artemis.Entity.entityManager">
            <summary>The entity manager.</summary>
        </member>
        <member name="F:Artemis.Entity.entityWorld">
            <summary>The entity world.</summary>
        </member>
        <member name="F:Artemis.Entity.uniqueId">
            <summary>
            The unique id.
            This ID is unique in Artemis (even if the Entity is reused)
            This value can be SET when building the Entity (passed as a parameter to EntityWorld.CreateEntity)
            </summary>
        </member>
        <member name="M:Artemis.Entity.#ctor(Artemis.EntityWorld,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Entity"/> class.</summary>
            <param name="entityWorld">The entity world.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Artemis.Entity.AddComponent(Artemis.Interface.IComponent)">
            <summary>Adds the component.</summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Artemis.Entity.AddComponent``1(Artemis.Interface.IComponent)">
            <summary>Adds the component.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <param name="component">The component.</param>
        </member>
        <member name="M:Artemis.Entity.AddComponent``1(Artemis.Interface.IComponent{``0})">
            <summary>Adds the component.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <param name="component">The component.</param>
        </member>
        <member name="M:Artemis.Entity.AddComponentFromPool``1">
            <summary>Adds the component from pool.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <returns>The added component.</returns>
        </member>
        <member name="M:Artemis.Entity.Delete">
            <summary>Deletes this instance.</summary>
        </member>
        <member name="M:Artemis.Entity.GetComponent(Artemis.ComponentType)">
            <summary>
            <para>Gets the component.</para>
            <para>Slower retrieval of components from this entity.</para>
            <para>Minimize usage of this, but is fine to use e.g. when</para>
            <para>creating new entities and setting data in components.</para>
            </summary>
            <param name="componentType">Type of the component.</param>
            <returns>component that matches, or null if none is found.</returns>
        </member>
        <member name="M:Artemis.Entity.GetComponent``1">
            <summary>
            <para>Gets the component.</para>
            <para>This is the preferred method to use when</para>
            <para>retrieving a component from a entity.</para>
            <para>It will provide good performance.</para>
            </summary>
            <typeparam name="T">the expected return component type.</typeparam>
            <returns>component that matches, or null if none is found.</returns>
        </member>
        <member name="M:Artemis.Entity.HasComponent``1">
            <summary>Determines whether this instance has a specific component.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <returns><see langword="true" /> if this instance has a specific component; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Artemis.Entity.Refresh">
            <summary><para>Refreshes this instance.</para>
              <para>Refresh all changes to components for this entity.</para>
              <para>After adding or removing components,</para>
              <para>you must call this method.</para>
              <para>It will update all relevant systems.</para>
              <para>It is typical to call this after adding components</para>
              <para>to a newly created entity.</para>
            </summary>
        </member>
        <member name="M:Artemis.Entity.RemoveComponent``1">
            <summary>Remove Component from this entity.</summary>
            <typeparam name="T">Component Type.</typeparam>
        </member>
        <member name="M:Artemis.Entity.RemoveComponent(Artemis.ComponentType)">
            <summary><para>Removes the component.</para>
              <para>Faster removal of components from a entity.</para></summary>
            <param name="componentType">The type.</param>
        </member>
        <member name="M:Artemis.Entity.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Artemis.Entity.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Artemis.Entity.AddSystemBit(System.Numerics.BigInteger)">
            <summary>Adds the system bit.</summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="M:Artemis.Entity.AddTypeBit(System.Numerics.BigInteger)">
            <summary>Adds the type bit.</summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="M:Artemis.Entity.RemoveSystemBit(System.Numerics.BigInteger)">
            <summary>Removes the system bit.</summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="M:Artemis.Entity.RemoveTypeBit(System.Numerics.BigInteger)">
            <summary>Removes the type bit.</summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="P:Artemis.Entity.Components">
            <summary>
              <para>Gets all components belonging to this entity.</para>
              <para>Warning: Use only for debugging purposes, it is dead slow.</para>
              <para>The returned bag is only valid until this method is called</para>
              <para>again, then it is overwritten.</para>
            </summary>
            <value>All components of this entity.</value>
        </member>
        <member name="P:Artemis.Entity.DeletingState">
            <summary>Gets or sets a value indicating whether [deleting state].</summary>
            <value><see langword="true" /> if [deleting state]; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.Entity.IsEnabled">
            <summary>Gets or sets a value indicating whether this <see cref="T:Artemis.Entity"/> is enabled.</summary>
            <value><see langword="true"/> if enabled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Artemis.Entity.Group">
            <summary>Gets or sets the group.</summary>
            <value>The group.</value>
        </member>
        <member name="P:Artemis.Entity.Id">
            <summary>
            <para>Gets the internal id for this entity within the framework.</para>
            <para>No other entity will have the same ID,</para>
            <para>but IDs are however reused so another entity may acquire</para>
            <para>this ID if the previous entity was deleted.</para>
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Artemis.Entity.RefreshingState">
            <summary>Gets or sets a value indicating whether [refreshing state].</summary>
            <value><see langword="true" /> if [refreshing state]; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.Entity.Tag">
            <summary>Gets or sets the tag.</summary>
            <value>The tag.</value>
        </member>
        <member name="P:Artemis.Entity.UniqueId">
            <summary>Gets the unique id.</summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Artemis.Entity.IsActive">
            <summary>Gets a value indicating whether this instance is active.</summary>
            <value><see langword="true" /> if this instance is active; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Artemis.Entity.SystemBits">
            <summary>Gets or sets the system bits.</summary>
            <value>The system bits.</value>
        </member>
        <member name="P:Artemis.Entity.TypeBits">
            <summary>Gets or sets the type bits.</summary>
            <value>The type bits.</value>
        </member>
        <member name="T:Artemis.ComponentPoolMultiThread`1">
            <summary><para>A collection that maintains a set of class instances</para>
              <para>to allow for recycling instances and</para>
              <para>minimizing the effects of garbage collection.</para></summary>
            <typeparam name="T">The type of object to store in the Pool. Pools can only hold class types.</typeparam>
        </member>
        <member name="F:Artemis.ComponentPoolMultiThread`1.pool">
            <summary>The pool.</summary>
        </member>
        <member name="F:Artemis.ComponentPoolMultiThread`1.sync">
            <summary>The sync.</summary>
        </member>
        <member name="M:Artemis.ComponentPoolMultiThread`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Func{System.Type,`0},System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.ComponentPoolMultiThread`1"/> class.</summary>
            <param name="initialSize">The initial size.</param>
            <param name="resizePool">The resize pool.</param>
            <param name="resizes">if set to <see langword="true"/> [resizes].</param>
            <param name="allocateFunc">The allocate <see langword="Func"/>.</param>
            <param name="innerType">Type of the inner.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">initialSize and resizePool must be at least 1.</exception>
            <exception cref="T:System.ArgumentNullException">allocateFunc or innerType is null.</exception>
        </member>
        <member name="M:Artemis.ComponentPoolMultiThread`1.CleanUp">
            <summary>Cleans up the pool by checking each valid object to ensure it is still actually valid.
            Must be called regularly to free returned Objects</summary>
        </member>
        <member name="M:Artemis.ComponentPoolMultiThread`1.New">
            <summary>Returns a new object from the Pool.</summary>
            <returns>The next object in the pool if available, null if all instances are valid.</returns>
            <exception cref="T:System.Exception">Limit Exceeded components.Length, and the pool was set to not resize</exception>
            <exception cref="T:System.InvalidOperationException">The pool's allocate method returned a null object reference.</exception>
        </member>
        <member name="M:Artemis.ComponentPoolMultiThread`1.ReturnObject(`0)">
            <summary>Return an object to the pool</summary>
            <param name="component">The component.</param>
        </member>
        <member name="P:Artemis.ComponentPoolMultiThread`1.InvalidCount">
            <summary>Gets the number of invalid objects in the pool.</summary>
            <value>The invalid count.</value>
        </member>
        <member name="P:Artemis.ComponentPoolMultiThread`1.ResizeAmount">
            <summary>Gets the resize amount.</summary>
            <value>The resize amount.</value>
        </member>
        <member name="P:Artemis.ComponentPoolMultiThread`1.ValidCount">
            <summary>Gets the number of valid objects in the pool.</summary>
            <value>The valid count.</value>
        </member>
        <member name="P:Artemis.ComponentPoolMultiThread`1.Item(System.Int32)">
            <summary>Returns a valid object at the given index. The index must fall in the range of [0, ValidCount].</summary>
            <param name="index">The index.</param>
            <returns>A valid object found at the index</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index must be less than or equal to ValidCount.</exception>
        </member>
        <member name="T:Artemis.Manager.ExecutionType">
            <summary>Enumeration ExecutionType.</summary>
        </member>
        <member name="F:Artemis.Manager.ExecutionType.Synchronous">
            <summary>The synchronous.</summary>
        </member>
        <member name="F:Artemis.Manager.ExecutionType.Asynchronous">
            <summary>The asynchronous.</summary>
        </member>
        <member name="T:Artemis.Exceptions.MissingEntityTemplateException">
            <summary>Exception that is thrown when trying to use a EntityTemplate which does not exist.</summary>
        </member>
        <member name="M:Artemis.Exceptions.MissingEntityTemplateException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Exceptions.MissingEntityTemplateException"/> class.</summary>
            <param name="entityTemplateTag">The entity template tag.</param>
        </member>
        <member name="M:Artemis.Exceptions.MissingEntityTemplateException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Exceptions.MissingEntityTemplateException"/> class.</summary>
            <param name="entityTemplateTag">The entity template tag.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Artemis.Exceptions.MissingEntityTemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Exceptions.MissingEntityTemplateException"/> class.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Artemis.Attributes.AttributesProcessor">
            <summary>Class AttributesProcessor.</summary>
        </member>
        <member name="F:Artemis.Attributes.AttributesProcessor.SupportedAttributes">
            <summary>The supported attributes.</summary>
        </member>
        <member name="M:Artemis.Attributes.AttributesProcessor.Process(System.Collections.Generic.List{System.Type})">
            <summary>Processes the specified supported attributes.</summary>
            <param name="supportedAttributes">The supported attributes.</param>
            <returns>The Dictionary{TypeList{Attribute}}.</returns>
        </member>
        <member name="M:Artemis.Attributes.AttributesProcessor.Process(System.Collections.Generic.List{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>Processes the specified supported attributes.</summary>
            <param name="supportedAttributes">The supported attributes.</param>
            <param name="assembliesToScan">The assemblies to scan.</param>
            <returns>The Dictionary{TypeList{Attribute}}.</returns>
        </member>
        <member name="T:Artemis.System.HybridQueueSystemProcessing">
            <summary>Class HybridQueueSystemProcessing.</summary>
        </member>
        <member name="T:Artemis.System.EntityProcessingSystem">
            <summary>The entity processing system - a template for processing many entities, tied to components.</summary>
        </member>
        <member name="M:Artemis.System.EntityProcessingSystem.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityProcessingSystem"/> class.</summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.EntityProcessingSystem.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityProcessingSystem"/> class.</summary>
            <param name="requiredType">The required Type.</param>
            <param name="otherTypes">The optional other types.</param>
        </member>
        <member name="M:Artemis.System.EntityProcessingSystem.Process(Artemis.Entity)">
            <summary><para>Processes the specified entity.</para>
            <para>Users might extend this method when they want</para>
            <para>to process the specified entities.</para></summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.EntityProcessingSystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="F:Artemis.System.HybridQueueSystemProcessing.EntitiesToProcessEachFrame">
            <summary>The entities to process each frame.</summary>
        </member>
        <member name="F:Artemis.System.HybridQueueSystemProcessing.compTypes">
            <summary>The comp types.</summary>
        </member>
        <member name="F:Artemis.System.HybridQueueSystemProcessing.queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:Artemis.System.HybridQueueSystemProcessing.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.HybridQueueSystemProcessing"/> class.</summary>
            <param name="requiredType">Type of the required.</param>
            <param name="otherTypes">The other types.</param>
        </member>
        <member name="M:Artemis.System.HybridQueueSystemProcessing.AddToQueue(Artemis.Entity)">
            <summary>Adds to queue.</summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.Exception">This EntitySystem does not process this kind of entity</exception>
        </member>
        <member name="M:Artemis.System.HybridQueueSystemProcessing.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="P:Artemis.System.HybridQueueSystemProcessing.QueueCount">
            <summary>Gets the queue count.</summary>
            <value>The queue count.</value>
        </member>
        <member name="T:Artemis.Manager.SystemBitManager">
            <summary>Class SystemBitManager.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemBitManager.SystemBits">
            <summary>The system bits.</summary>
        </member>
        <member name="F:Artemis.Manager.SystemBitManager.position">
            <summary>The position.</summary>
        </member>
        <member name="M:Artemis.Manager.SystemBitManager.GetBitFor(Artemis.System.EntitySystem)">
            <summary>Gets the bit-register for the specified entity system.</summary>
            <param name="entitySystem">The entity system.</param>
            <returns>The bit flag register for the specified system.</returns>
        </member>
        <member name="T:Artemis.Manager.ComponentTypeManager">
            <summary>Class ComponentTypeManager.</summary>
        </member>
        <member name="F:Artemis.Manager.ComponentTypeManager.ComponentTypes">
            <summary>The component types.</summary>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.GetBit``1">
            <summary>Gets the bit.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <returns>The bit flag register.</returns>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.GetId``1">
            <summary>Gets the id.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <returns>The id.</returns>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.GetTypeFor``1">
            <summary>Get the component type for the given component instance.</summary>
            <typeparam name="T">Component for which you want the component type.</typeparam>
            <returns>Component Type.</returns>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.GetTypeFor(System.Type)">
            <summary><para>Ensure the given component type [tag] is an "official"</para>
              <para>component type for your solution. If it does not already</para>
              <para>exist, add it to the bag of available component types.</para>
              <para>This is a way you can easily add "official" component</para>
              <para>types to your solution.</para></summary>
            <param name="component">The component type label you want to ensure is an "official" component type</param>
            <returns>The specified ComponentType.</returns>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.GetTypesFromBits(System.Numerics.BigInteger)">
            <summary>Creates an enumerable from a <c>BigIntger</c> which holds type bits.</summary>
            <param name="bits">The BigInteger which holds the type bits.</param>
            <returns>An Enumerable of each type the bits has.</returns>
        </member>
        <member name="M:Artemis.Manager.ComponentTypeManager.SetTypeFor``1(Artemis.ComponentType)">
            <summary>Sets the type for specified ComponentType T.</summary>
            <typeparam name="T">The <see langword="Type" /> of T.</typeparam>
            <param name="type">The type.</param>
        </member>
        <member name="T:Artemis.ComponentPool`1">
            <summary>
            <para>A collection that maintains a set of class instances</para>
            <para>to allow for recycling instances and</para>
            <para>minimizing the effects of garbage collection.</para>
            </summary>
            <typeparam name="T">The type of object to store in the Pool. Pools can only hold class types.</typeparam>
        </member>
        <member name="F:Artemis.ComponentPool`1.allocate">
            <summary>The allocate.</summary>
        </member>
        <member name="F:Artemis.ComponentPool`1.isResizeAllowed">
            <summary>The is resize allowed indicates whether or not the pool is allowed to resize.</summary>
        </member>
        <member name="F:Artemis.ComponentPool`1.innerType">
            <summary>The inner type.</summary>
        </member>
        <member name="F:Artemis.ComponentPool`1.invalidComponents">
            <summary>The invalid components.</summary>
        </member>
        <member name="F:Artemis.ComponentPool`1.components">
            <summary>The actual components of the pool.</summary>
        </member>
        <member name="M:Artemis.ComponentPool`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Func{System.Type,`0},System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.ComponentPool`1"/> class.</summary>
            <param name="initialSize">The initial size of the pool.</param>
            <param name="resizePool">The resize pool size.</param>
            <param name="resizes">Whether or not the pool is allowed to increase its size as needed.</param>
            <param name="allocateFunc">A function used to allocate an instance for the pool.</param>
            <param name="innerType">Type ComponentPool-able.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">InitialSize must be at least 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">ResizePool must be at least 1.</exception>
            <exception cref="T:System.ArgumentNullException">AllocateFunc must not be null.</exception>
            <exception cref="T:System.ArgumentNullException">InnerType must not be null.</exception>
        </member>
        <member name="M:Artemis.ComponentPool`1.CleanUp">
            <summary>
            <para>Cleans up the pool by checking each valid object</para>
            <para>to ensure it is still actually valid.</para>
            <para>Must be called regularly to free returned Objects.</para>
            </summary>
        </member>
        <member name="M:Artemis.ComponentPool`1.New">
            <summary>Returns a new object from the Pool.</summary>
            <returns>The next object in the pool if available, null if all instances are valid.</returns>
            <exception cref="T:System.Exception">Limit Exceeded components.Length and the pool was set to not resize.</exception>
            <exception cref="T:System.InvalidOperationException">The pool's allocate method returned a null object reference.</exception>
        </member>
        <member name="M:Artemis.ComponentPool`1.ReturnObject(`0)">
            <summary>Returns the object.</summary>
            <param name="component">The component.</param>
        </member>
        <member name="P:Artemis.ComponentPool`1.InvalidCount">
            <summary>Gets the number of invalid objects in the pool.</summary>
            <value>The invalid count.</value>
        </member>
        <member name="P:Artemis.ComponentPool`1.ResizeAmount">
            <summary>Gets the resize amount.</summary>
            <value>The resize amount.</value>
        </member>
        <member name="P:Artemis.ComponentPool`1.ValidCount">
            <summary>Gets the number of valid objects in the pool.</summary>
            <value>The valid count.</value>
        </member>
        <member name="P:Artemis.ComponentPool`1.Item(System.Int32)">
            <summary>Returns a valid object at the given index. The index must fall in the range of [0, ValidCount].</summary>
            <param name="index">The index.</param>
            <returns>A valid object found at the index</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index must be less than or equal to ValidCount.</exception>
        </member>
        <member name="T:Artemis.Blackboard.BlackBoard">
            <summary>Class BlackBoard.</summary>
        </member>
        <member name="F:Artemis.Blackboard.BlackBoard.entryLock">
            <summary>The entry lock.</summary>
        </member>
        <member name="F:Artemis.Blackboard.BlackBoard.intelligence">
            <summary>The intelligence.</summary>
        </member>
        <member name="F:Artemis.Blackboard.BlackBoard.triggers">
            <summary>The triggers.</summary>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Blackboard.BlackBoard"/> class.</summary>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.AddTrigger(Artemis.Blackboard.Trigger,System.Boolean)">
            <summary>Adds the trigger.</summary>
            <param name="trigger">The trigger.</param>
            <param name="evaluateNow">if set to <see langword="true" /> [evaluate now].</param>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.AtomicOperateOnEntry(System.Action{Artemis.Blackboard.BlackBoard})">
            <summary>Atomics the operate on entry.</summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.GetEntry``1(System.String)">
            <summary>Gets the entry.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <param name="name">The name.</param>
            <returns>The specified element.</returns>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.GetEntry(System.String)">
            <summary>Gets the entry.</summary>
            <param name="name">The name.</param>
            <returns>The specified element.</returns>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.RemoveEntry(System.String)">
            <summary>Removes the entry.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.RemoveTrigger(Artemis.Blackboard.Trigger)">
            <summary>Removes the trigger.</summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.SetEntry``1(System.String,``0)">
            <summary>Sets the entry.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
            <param name="name">The name.</param>
            <param name="intel">The intel.</param>
        </member>
        <member name="M:Artemis.Blackboard.BlackBoard.TriggerList(System.String)">
            <summary>Get a list of all related triggers.</summary>
            <param name="name">The name.</param>
            <returns>A List{Trigger} of appropriated triggers.</returns>
        </member>
        <member name="T:Artemis.Attributes.ArtemisEntityTemplate">
            <summary>Class ArtemisEntityTemplate.</summary>
        </member>
        <member name="M:Artemis.Attributes.ArtemisEntityTemplate.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Attributes.ArtemisEntityTemplate"/> class.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Artemis.Attributes.ArtemisEntityTemplate.Name">
            <summary>Gets the name.</summary>
            <value>The name.</value>
        </member>
        <member name="T:Artemis.Utils.BagEnumerator`1">
            <summary>Class BagEnumerator.</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
        </member>
        <member name="F:Artemis.Utils.BagEnumerator`1.bag">
            <summary>The bag.</summary>
        </member>
        <member name="F:Artemis.Utils.BagEnumerator`1.index">
            <summary>The index.</summary>
        </member>
        <member name="M:Artemis.Utils.BagEnumerator`1.#ctor(Artemis.Utils.Bag{`0})">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Utils.BagEnumerator`1"/> class.</summary>
            <param name="bag">The bag.</param>
        </member>
        <member name="M:Artemis.Utils.BagEnumerator`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Artemis.Utils.BagEnumerator`1.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Artemis.Utils.BagEnumerator`1.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
        </member>
        <member name="P:Artemis.Utils.BagEnumerator`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>Gets the current element in the collection.</summary>
            <value>The current element.</value>
            <returns>The current element in the collection.</returns>
        </member>
        <member name="P:Artemis.Utils.BagEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the current element in the collection.</summary>
            <value>The current.</value>
            <returns>The current element in the collection.</returns>
        </member>
        <member name="T:Artemis.ComponentType">
            <summary>Represents a Component Type.</summary>
        </member>
        <member name="F:Artemis.ComponentType.bit">
            <summary>The bit.</summary>
        </member>
        <member name="F:Artemis.ComponentType.id">
            <summary>The id.</summary>
        </member>
        <member name="M:Artemis.ComponentType.#cctor">
            <summary>Initializes static members of the <see cref="T:Artemis.ComponentType"/> class.</summary>
        </member>
        <member name="M:Artemis.ComponentType.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.ComponentType"/> class.</summary>
        </member>
        <member name="P:Artemis.ComponentType.Id">
            <summary>Gets the bit index that represents this type of component.</summary>
            <value>The id.</value>
        </member>
        <member name="P:Artemis.ComponentType.Bit">
            <summary>Gets the bit that represents this type of component.</summary>
            <value>The bit.</value>
        </member>
        <member name="P:Artemis.ComponentType.NextId">
            <summary>Gets the next id.</summary>
            <value>The next id.</value>
        </member>
        <member name="P:Artemis.ComponentType.NextBit">
            <summary>Gets the next bit.</summary>
            <value>The next bit.</value>
        </member>
        <member name="T:Artemis.ComponentType`1">
            <summary>The component type class.</summary>
            <typeparam name="T">The Type T.</typeparam>
        </member>
        <member name="M:Artemis.ComponentType`1.#cctor">
            <summary>Initializes static members of the <see cref="T:Artemis.ComponentType`1"/> class.</summary>
        </member>
        <member name="P:Artemis.ComponentType`1.CType">
            <summary>Gets the type of the C.</summary>
            <value>The type of the C.</value>
        </member>
        <member name="T:Artemis.Blackboard.TriggerStateType">
            <summary>Enumeration TriggerStateType.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerStateType.ValueAdded">
            <summary>The value added.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerStateType.ValueRemoved">
            <summary>The value removed.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerStateType.ValueChanged">
            <summary>The value changed.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerStateType.TriggerAdded">
            <summary>The trigger added.</summary>
        </member>
        <member name="T:Artemis.Utils.FastDateTime">
            <summary>
            <para>The fast date time.</para>
            <para>The standard DateTime.Now call produces more garbage</para>
            <para>and is slower. For Windows NT 3.5 and later the timer</para>
            <para>resolution is approximately 10 milliseconds.</para>
            </summary>
        </member>
        <member name="F:Artemis.Utils.FastDateTime.LocalUtcOffset">
            <summary>The local UTC offset.</summary>
        </member>
        <member name="M:Artemis.Utils.FastDateTime.GetMicroSeconds(System.Int64)">
            <summary>Gets the micro seconds from ticks.</summary>
            <param name="ticks">The ticks.</param>
            <returns>The <c>µs</c> as System.Double.</returns>
        </member>
        <member name="M:Artemis.Utils.FastDateTime.GetNanoSeconds(System.Int64)">
            <summary>Gets the nano seconds.</summary>
            <param name="ticks">The ticks.</param>
            <returns>The <c>ns</c> as System.Double.</returns>
        </member>
        <member name="M:Artemis.Utils.FastDateTime.ToString(System.TimeSpan)">
            <summary>Returns a <see cref="T:System.String"/> that formats a time span.</summary>
            <param name="timeSpan">The time span.</param>
            <returns>A <see cref="T:System.String"/> that formats a time span.</returns>
        </member>
        <member name="M:Artemis.Utils.FastDateTime.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Artemis.Utils.FastDateTime.Now">
            <summary>Gets the now.</summary>
        </member>
        <member name="T:Artemis.Blackboard.TriggerMultiCondition">
            <summary>Class TriggerMultiCondition.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerMultiCondition.condition">
            <summary>The condition.</summary>
        </member>
        <member name="F:Artemis.Blackboard.TriggerMultiCondition.onFire">
            <summary>The on fire.</summary>
        </member>
        <member name="M:Artemis.Blackboard.TriggerMultiCondition.#ctor(System.Func{Artemis.Blackboard.BlackBoard,Artemis.Blackboard.TriggerStateType,System.Boolean},System.Action{Artemis.Blackboard.TriggerStateType},System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Blackboard.TriggerMultiCondition"/> class.</summary>
            <param name="condition">The condition.</param>
            <param name="onFire">The on fire.</param>
            <param name="names">The names.</param>
        </member>
        <member name="M:Artemis.Blackboard.TriggerMultiCondition.RemoveThisTrigger">
            <summary>Removes the this trigger.</summary>
        </member>
        <member name="M:Artemis.Blackboard.TriggerMultiCondition.CalledOnFire(Artemis.Blackboard.TriggerStateType)">
            <summary>Called if is fired.</summary>
            <param name="triggerStateType">State of the trigger.</param>
        </member>
        <member name="M:Artemis.Blackboard.TriggerMultiCondition.CheckConditionToFire">
            <summary>Checks the condition to fire.</summary>
            <returns><see langword="true" /> if condition is fired, <see langword="false" /> otherwise</returns>
        </member>
        <member name="T:Artemis.Attributes.ArtemisEntitySystem">
            <summary>Class ArtemisEntitySystem.</summary>
        </member>
        <member name="M:Artemis.Attributes.ArtemisEntitySystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.Attributes.ArtemisEntitySystem"/> class.</summary>
        </member>
        <member name="P:Artemis.Attributes.ArtemisEntitySystem.GameLoopType">
            <summary>Gets or sets the type of the game loop.</summary>
            <value>The type of the game loop.</value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisEntitySystem.Layer">
            <summary>Gets or sets the layer.</summary>
            <value>The layer.</value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisEntitySystem.ExecutionType">
            <summary>Gets or sets the type of the execution.</summary>
            <value>The type of the execution.</value>
        </member>
        <member name="T:Artemis.System.IntervalEntityProcessingSystem">
            <summary>Class IntervalEntityProcessingSystem.</summary>
        </member>
        <member name="T:Artemis.System.IntervalEntitySystem">
            <summary>Class IntervalEntitySystem.</summary>
        </member>
        <member name="F:Artemis.System.IntervalEntitySystem.timer">
            <summary>The timer.</summary>
        </member>
        <member name="M:Artemis.System.IntervalEntitySystem.#ctor(System.TimeSpan,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.IntervalEntitySystem"/> class.</summary>
            <param name="timeSpan">The time span.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Artemis.System.IntervalEntitySystem.#ctor(System.TimeSpan,Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.IntervalEntitySystem"/> class.</summary>
            <param name="timeSpan">The time span.</param>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.IntervalEntitySystem.CheckProcessing">
            <summary>Checks the processing.</summary>
            <returns><see langword="true" /> if this instance is enabled, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:Artemis.System.IntervalEntityProcessingSystem.#ctor(System.TimeSpan,System.Type,System.Type[])">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.IntervalEntityProcessingSystem"/> class.</summary>
            <param name="timeSpan">The time span.</param>
            <param name="requiredType">Type of the required.</param>
            <param name="otherTypes">The other types.</param>
        </member>
        <member name="M:Artemis.System.IntervalEntityProcessingSystem.#ctor(System.TimeSpan,Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.IntervalEntityProcessingSystem"/> class.</summary>
            <param name="timeSpan">The time span.</param>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Artemis.System.IntervalEntityProcessingSystem.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.IntervalEntityProcessingSystem.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.Interface.IComponent`1">
            <summary>Interface that can be used if the component can be sub-classed but should still be treated as the base class, 'T' when being added to a entity.</summary>
            <typeparam name="T">The Type T.</typeparam>
        </member>
        <member name="T:Artemis.System.QueueSystemProcessingThreadSafe">
            <summary>
            <para>Queue system not based on components.</para>
            <para>It Process ONCE everything you explicitly add to it</para>
            <para>using the method AddToQueue.</para>
            </summary>
        </member>
        <member name="F:Artemis.System.QueueSystemProcessingThreadSafe.Id">
            <summary>The id.</summary>
        </member>
        <member name="F:Artemis.System.QueueSystemProcessingThreadSafe.QueuesManager">
            <summary>The queues manager.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.QueueSystemProcessingThreadSafe"/> class.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Artemis.System.QueueSystemProcessingThreadSafe"/> class.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.AddToQueue(Artemis.Entity,System.Type)">
            <summary>Adds to queue.</summary>
            <param name="ent">The entity.</param>
            <param name="entitySystemType">Type of the entity system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.GetQueueProcessingLimit(System.Type)">
            <summary>Gets the queue processing limit.</summary>
            <param name="entitySystemType">Type of the entity system.</param>
            <returns>The limit.</returns>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.QueueCount(System.Type)">
            <summary>Queues the count.</summary>
            <param name="entitySystemType">Type of the entity system.</param>
            <returns>The number of queues.</returns>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.SetQueueProcessingLimit(System.Int32,System.Type)">
            <summary>Sets the queue processing limit.</summary>
            <param name="limit">The limit.</param>
            <param name="entitySystemType">Type of the entity system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.OnAdded(Artemis.Entity)">
            <summary>Called when [added].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.OnChange(Artemis.Entity)">
            <summary>Called when [change].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.OnRemoved(Artemis.Entity)">
            <summary>Called when [removed].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe.Process">
            <summary>Processes this instance.</summary>
        </member>
        <member name="T:Artemis.System.QueueSystemProcessingThreadSafe`1">
            <summary><para>Queue system not based on entities and components.</para>
              <para>It Process ONCE everything you explicitly add to it.</para>
              <para>Use the static method AddToQueue (second parameter is the type of your specialization of this class).</para>
            </summary>
            <typeparam name="T">The Type T.</typeparam>
        </member>
        <member name="F:Artemis.System.QueueSystemProcessingThreadSafe`1.Id">
            <summary>The id.</summary>
        </member>
        <member name="F:Artemis.System.QueueSystemProcessingThreadSafe`1.QueuesManager">
            <summary>The queues manager.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.QueueSystemProcessingThreadSafe`1"/> class.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Artemis.System.QueueSystemProcessingThreadSafe`1"/> class.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.AddToQueue(`0,System.Type)">
            <summary>Adds to queue.</summary>
            <param name="ent">The entity.</param>
            <param name="entitySystemType">Type of the entity system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.GetQueueProcessingLimit(System.Type)">
            <summary>Gets the queue processing limit.</summary>
            <param name="entitySystemType">Type of the entity system.</param>
            <returns>The limit.</returns>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.QueueCount(System.Type)">
            <summary>Queues the count.</summary>
            <param name="entitySystemType">Type of the entity system.</param>
            <returns>The number of queues.</returns>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.SetQueueProcessingLimit(System.Int32,System.Type)">
            <summary>Sets the queue processing limit.</summary>
            <param name="limit">The limit.</param>
            <param name="entitySystemType">Type of the entity system.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.OnAdded(Artemis.Entity)">
            <summary>Called when [added].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.OnChange(Artemis.Entity)">
            <summary>Called when [change].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.OnRemoved(Artemis.Entity)">
            <summary>Called when [removed].</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.Process(Artemis.Entity)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.Process">
            <summary>Processes this instance.</summary>
        </member>
        <member name="M:Artemis.System.QueueSystemProcessingThreadSafe`1.Process(`0)">
            <summary>Processes the specified entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Artemis.System.EntityComponentProcessingSystem`1">
            <summary>System which processes entities calling Process(Entity entity, T component) every update.
            Automatically extracts the components specified by the type parameters.</summary>
            <typeparam name="T">The component.</typeparam>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`1"/> class with an aspect which processes entities which have all the specified component types.</summary>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`1.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`1"/> class with an aspect which processes entities which have all the specified component types as well as the any additional constraints specified by the aspect.</summary>
            <param name="aspect">The aspect specifying the additional constraints.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`1.Process(Artemis.Entity,`0)">
            <summary>Called for every entity in this system with the components automatically passed as arguments.</summary>
            <param name="entity">The entity that is processed </param>
            <param name="component1">The component.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`1.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.System.EntityComponentProcessingSystem`2">
            <summary>System which processes entities calling Process(Entity entity, T1 component1, T2 component2) every update. 
            Automatically extracts the components specified by the type parameters.</summary>
            <typeparam name="T1">The first component.</typeparam>
            <typeparam name="T2">The second component.</typeparam>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`2"/> class 
            with an aspect which processes entities which have all the specified component types.</summary>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`2.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`2"/> class 
            with an aspect which processes entities which have all the specified component types as well as 
            the any additional constraints specified by the aspect.</summary>
            <param name="aspect"> The aspect specifying the additional constraints. </param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`2.Process(Artemis.Entity,`0,`1)">
            <summary>Called every for every entity in this system with the components automatically passed as arguments.</summary>
            <param name="entity">The entity that is processed </param>
            <param name="component1">The first component.</param>
            <param name="component2">The second component.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`2.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.System.EntityComponentProcessingSystem`3">
            <summary>
            System which processes entities calling Process(Entity entity, T1 component1, T2 component2, T3 component3) every update.
            Automatically extracts the components specified by the type parameters.
            </summary>
            <typeparam name="T1">The first component.</typeparam>
            <typeparam name="T2">The second component.</typeparam>
            <typeparam name="T3">The third component.</typeparam>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`3"/> class 
            with an aspect which processes entities which have all the specified component types.</summary>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`3.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`3"/> class 
            with an aspect which processes entities which have all the specified component types
            as well as the any additional constraints specified by the aspect.</summary>
            <param name="aspect">The aspect specifying the additional constraints.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`3.Process(Artemis.Entity,`0,`1,`2)">
            <summary>Called for every entity in this system with the components automatically passed as arguments.</summary>
            <param name="entity">The entity that is processed</param>
            <param name="component1">The first component.</param>
            <param name="component2">The second component.</param>
            <param name="component3">The third component.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`3.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.System.EntityComponentProcessingSystem`4">
            <summary>System which processes entities calling Process(Entity entity, T1 t1, T2 t2, T3 t3, T4 t4) every update.
            Automatically extracts the components specified by the type parameters.</summary>
            <typeparam name="T1">The first component.</typeparam>
            <typeparam name="T2">The second component.</typeparam>
            <typeparam name="T3">The third component.</typeparam>
            <typeparam name="T4">The fourth component.</typeparam>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`4.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`4"/> class 
            with an aspect which processes entities which have all the specified component types.</summary>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`4.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`4"/> class 
            with an aspect which processes entities which have all the specified component types
            as well as the any additional constraints specified by the aspect.</summary>
            <param name="aspect">The aspect specifying the additional constraints.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`4.Process(Artemis.Entity,`0,`1,`2,`3)">
            <summary>Called every for every entity in this system with the components automatically passed as arguments.</summary>
            <param name="entity">The entity that is processed</param>
            <param name="component1">The first component.</param>
            <param name="component2">The second component.</param>
            <param name="component3">The third component.</param>
            <param name="component4">The fourth component.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`4.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.System.EntityComponentProcessingSystem`5">
            <summary>System which processes entities calling Process(Entity entity, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) every update.
            Automatically extracts the components specified by the type parameters.</summary>
            <typeparam name="T1">The first component.</typeparam>
            <typeparam name="T2">The second component.</typeparam>
            <typeparam name="T3">The third component.</typeparam>
            <typeparam name="T4">The fourth component.</typeparam>
            <typeparam name="T5">The fifth component.</typeparam>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`5.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`5"/> class 
            with an aspect which processes entities which have all the specified component types.</summary>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`5.#ctor(Artemis.Aspect)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.System.EntityComponentProcessingSystem`5"/> class 
            with an aspect which processes entities which have all the specified component types
            as well as the any additional constraints specified by the aspect.</summary>
            <param name="aspect">The aspect specifying the additional constraints.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`5.Process(Artemis.Entity,`0,`1,`2,`3,`4)">
            <summary>Called every for every entity in this system with the components automatically passed as arguments.</summary>
            <param name="entity">The entity that is processed</param>
            <param name="component1">The first component.</param>
            <param name="component2">The second component.</param>
            <param name="component3">The third component.</param>
            <param name="component4">The fourth component.</param>
            <param name="component5">The fifth component.</param>
        </member>
        <member name="M:Artemis.System.EntityComponentProcessingSystem`5.ProcessEntities(System.Collections.Generic.IDictionary{System.Int32,Artemis.Entity})">
            <summary>Processes the entities.</summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Artemis.Manager.RemovedComponentHandler">
            <summary>Delegate RemovedComponentHandler.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
        </member>
        <member name="T:Artemis.Manager.GameLoopType">
            <summary>The game loop type.</summary>
        </member>
        <member name="F:Artemis.Manager.GameLoopType.Update">
            <summary>The update.</summary>
        </member>
        <member name="F:Artemis.Manager.GameLoopType.Draw">
            <summary>The draw.</summary>
        </member>
        <member name="T:Artemis.Manager.AddedComponentHandler">
            <summary>Delegate AddedComponentHandler.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
        </member>
        <member name="T:Artemis.ComponentMapper`1">
            <summary>Another way to get components from entities, prefer using the GetComponent method of the Entity object now. Note: this class is deprecated and will be removed in future releases!</summary>
            <typeparam name="T">The <see langword="Type"/> T.</typeparam>
        </member>
        <member name="F:Artemis.ComponentMapper`1.entityManager">
            <summary>The entity manager.</summary>
        </member>
        <member name="F:Artemis.ComponentMapper`1.componentType">
            <summary>The component type.</summary>
        </member>
        <member name="M:Artemis.ComponentMapper`1.#ctor(Artemis.EntityWorld)">
            <summary>Initializes a new instance of the <see cref="T:Artemis.ComponentMapper`1"/> class.</summary>
            <param name="entityWorld">The entity world.</param>
        </member>
        <member name="M:Artemis.ComponentMapper`1.GetComponentMapperFor``1(``0,Artemis.EntityWorld)">
            <summary>Gets the component mapper for.</summary>
            <typeparam name="TK">The <see langword="Type" /> TK.</typeparam>
            <param name="type">The type.</param>
            <param name="entityWorld">The entity world.</param>
            <returns>The ComponentMapper.</returns>
        </member>
        <member name="M:Artemis.ComponentMapper`1.Get(Artemis.Entity)">
            <summary>Gets the specified entity.</summary>
            <param name="entity">The entity.</param>
            <returns>The specified component.</returns>
        </member>
    </members>
</doc>
